---
#
# This is the canonical configuration for the `README.md`
# Run `make readme` to rebuild the `README.md`
#

# Name of this project
name: terraform-aws-tfstate-backend

# Logo for this project
#logo: docs/logo.png

# License of this project
license: "APACHE2"

# Canonical GitHub repo
github_repo: cloudposse/terraform-aws-tfstate-backend


# Badges to display
badges:
  - name: "Codefresh Build Status"
    image: "https://g.codefresh.io/api/badges/pipeline/cloudposse/terraform-modules%2Fterraform-aws-tfstate-backend?type=cf-1"
    url: "https://g.codefresh.io/public/accounts/cloudposse/pipelines/5d0d3d11c841e6807afe8d2a"
  - name: "Latest Release"
    image: "https://img.shields.io/github/release/cloudposse/terraform-aws-tfstate-backend.svg"
    url: "https://github.com/cloudposse/terraform-aws-tfstate-backend/releases/latest"
  - name: "Slack Community"
    image: "https://slack.cloudposse.com/badge.svg"
    url: "https://slack.cloudposse.com"

related:
  - name: "terraform-aws-dynamodb"
    description: "Terraform module that implements AWS DynamoDB with support for AutoScaling"
    url: "https://github.com/cloudposse/terraform-aws-dynamodb"
  - name: "terraform-aws-dynamodb-autoscaler"
    description: "Terraform module to provision DynamoDB autoscaler"
    url: "https://github.com/cloudposse/terraform-aws-dynamodb-autoscaler"

# Short description of this project
description: |-
  Terraform module to provision an S3 bucket to store `terraform.tfstate` file and a DynamoDB table to lock the state file
  to prevent concurrent modifications and state corruption.

  The module supports the following:

  1. Forced server-side encryption at rest for the S3 bucket
  2. S3 bucket versioning to allow for Terraform state recovery in the case of accidental deletions and human errors
  3. State locking and consistency checking via DynamoDB table to prevent concurrent operations
  4. DynamoDB server-side encryption

  https://www.terraform.io/docs/backends/types/s3.html


  __NOTE:__ The operators of the module (IAM Users) must have permissions to create S3 buckets and DynamoDB tables when performing `terraform plan` and `terraform apply`

  __NOTE:__ This module cannot be used to apply changes to the `mfa_delete` feature of the bucket. Changes regarding mfa_delete can only be made manually using the root credentials with MFA of the AWS Account where the bucket resides. Please see: https://github.com/terraform-providers/terraform-provider-aws/issues/62

# How to use this project
usage: |-
  
  ### Create
  
  Follow this procedure to create your deployment.

  1. Define the module in your `.tf` file using local state:
     ```hcl
      module "terraform_state_backend" {
        source        = "git::https://github.com/cloudposse/terraform-aws-tfstate-backend.git?ref=master"
        namespace     = "eg"
        stage         = "test"
        name          = "terraform"
        attributes    = ["state"]
        region        = "us-east-1"
        terraform_backend_config_file_path = "."
      }

      # Your Terraform configuration
      module "another_module" {
        source = "....."
      }
     ```

  1. `terraform init`

  1. `terraform apply`. This will create the state bucket and DynamoDB locking
     table, along with anything else you have defined in your `.tf` file(s). At
     this point, the Terraform state is still local.
     
     Module `terraform_state_backend` also creates a new `terraform.tf` file
     that defines the S3 state backend. For example:

     ```hcl
      backend "s3" {
        region         = "us-east-1"
        bucket         = "< the name of the S3 bucket >"
        key            = "terraform.tfstate"
        dynamodb_table = "< the name of the DynamoDB table >"
        profile        = ""
        role_arn       = ""
        encrypt        = true
      }
     ```
     Variables `terraform_backend_config_file_path` and
     `terraform_backend_config_file_name` control the name of this backend
     definition file.

  1. Add the name of the backend definition file (usually `terraform.tf`) to
     your `.gitignore` file.
  
  1. `terraform init`. Henceforth, Terraform will also read the newly-created
     backend definition file. Detecting that you might like to move your state
     into S3, Terraform asks, "Do you want to copy this state to the new
     backend?" Enter "yes". Now state is stored in the S3 bucket, and the
     DynamoDB table will be used to lock the state to prevent concurrent
     modifications.
  
  ### Destroy
  
  Follow this procedure to delete your deployment.
  
  1. Remove the backend definition file (default `terraform.tf`) so that your
     Terraform configuration no longer includes remote state `backend "s3"`.
  
  1. `terraform init`. The absence of a remote backend suggests to Terraform
     that you might like to move your state back to local files. Terraform asks,
     "Do you want to copy existing state to the new backend?" Enter "yes". Now
     state is once again stored in local file `terraform.tfstate`, and the S3
     backend bucket can be safely deleted.
  
  1. `terraform destroy`. This of course deletes all resources in your
     deployment.
  
  1. If you like, examine file `terraform.tfstate` to verify that it contains no
     resources
  
  <br/>

  ![s3-bucket-with-terraform-state](images/s3-bucket-with-terraform-state.png)


include:
  - "docs/targets.md"
  - "docs/terraform.md"

# Contributors to this project
contributors:
  - name: "Andriy Knysh"
    github: "aknysh"
  - name: "Erik Osterman"
    github: "osterman"
  - name: "Maarten van der Hoef"
    github: "maartenvanderhoef"
  - name: "Vladimir"
    github: "SweetOps"
  - name: "Chris Weyl"
    github: "rsrchboy"
  - name: "John McGehee"
    github: "jmcgeheeiv"
